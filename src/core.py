from sdv.relational import HMA1
from sdv import  Metadata
import pandas as pd
import json
import datetime
import os

class Synthetic_data():
    def __init__(self):
        self.input_metadata = None
        self.input_tables = None
        self.model = None
        self.output_data = None

    def load_input_data(self, dataset_id):
        path  = "DATA/input/tmp" + dataset_id
        self.input_metadata = json.load(open(path + "/metadata.json"))
        self.input_metadata["id"] = dataset_id
        table_name = list( self.input_metadata['tables'].keys() )
        self.input_tables = {}
        for i in range(len(table_name)):
            table = pd.read_csv(path + "/" + table_name[i] + ".csv")
            self.input_tables[table_name[i]] = table
    
    def get_input_metadata(self):
        return self.input_metadata
    
    def get_input_tables(self):
        return self.input_tables
    
    def generate_synthetic_data(self):
        self.model = HMA1(Metadata( self.input_metadata) )
        self.model.fit(self.input_tables)
        self.output_data = self.model.sample()
        self.generate_output_metadata(self.input_metadata)
    
    def generate_output_metadata(self, input_metadata):
        self.output_metadata = input_metadata
        self.output_metadata["id"] = "Synt_" + self.output_metadata["id"]
        self.output_metadata["created"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.output_metadata["ALLERT"] = "This is a sythetic data, generated by SDV"
        self.output_metadata["openess"] = "open"

    def save_output_data(self):
        path = "DATA/output/" + self.output_metadata["id"]
        os.mkdir(path)
        with open(path + "/metadata.json", 'w') as f:
            json.dump(self.output_metadata, f, indent=4)
        for table_name in self.output_data:
            self.output_data[table_name].to_csv(path + "/" + table_name + ".csv")



        
    
